{"version":3,"file":"script-injector.service.js","sourceRoot":"","sources":["../../src/service/script-injector.service.ts"],"names":[],"mappings":";;AAAA,sCAA2C;AAE3C,2DAAwD;AAExD;IAGE,+BAAoB,SAA2B;QAA3B,cAAS,GAAT,SAAS,CAAkB;IAAI,CAAC;IAE5C,2CAAW,GAAnB,UAAoB,GAAG;QACrB,IAAM,GAAG,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,KAAK,QAAQ,CAAC;QACpD,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC;IAC1C,CAAC;IAEO,4CAAY,GAApB,UAAqB,GAAG;QACtB,IAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAEhD,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;QACpB,MAAM,CAAC,IAAI,GAAG,iBAAiB,CAAC;QAChC,MAAM,CAAC,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QAEnC,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC;IAEO,6CAAa,GAArB,UAAsB,MAAM,EAAE,GAAG;QAAjC,iBAkBC;QAjBC,IAAM,OAAO,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC1C,MAAM,CAAC,MAAM,GAAG;gBACd,OAAO,CAAC,MAAM,CAAC,CAAC;YAClB,CAAC,CAAC;YACF,MAAM,CAAC,OAAO,GAAG;gBACf,MAAM,CAAC;oBACL,IAAI,EAAE,GAAG;oBACT,MAAM,EAAE,KAAK;iBACd,CAAC,CAAC;YACL,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,OAAO,CAAC,KAAK,CAAC,UAAA,QAAQ;YACpB,KAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,sBAAmB,GAAG,OAAG,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IAED,4CAAY,GAAZ,UAAa,MAAM;QACjB,IAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;QAC7D,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;IAC3B,CAAC;IAED,8CAAc,GAAd,UAAe,GAAG;QAChB,IAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;QACtC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC1B,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IACzC,CAAC;;gBAjDF,iBAAU;;;;gBAFF,qCAAgB;;IAqDzB,4BAAC;CAAA,AAnDD,IAmDC;AAlDY,sDAAqB","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { HttpErrorService } from './http-error.service';\n\n@Injectable()\nexport class ScriptInjectorService {\n\n  constructor(private httpError: HttpErrorService) { }\n\n  private completeURL(url) {\n    const ssl = document.location.protocol === 'https:';\n    return (ssl ? 'https:' : 'http:') + url;\n  }\n\n  private createScript(url) {\n    const script = document.createElement('script');\n\n    script.async = true;\n    script.type = 'text/javascript';\n    script.src = this.completeURL(url);\n\n    return script;\n  }\n\n  private promiseScript(script, url) {\n    const promise = new Promise((resolve, reject) => {\n      script.onload = () => {\n        resolve(script);\n      };\n      script.onerror = () => {\n        reject({\n          path: url,\n          loaded: false\n        });\n      };\n    });\n\n    promise.catch(response => {\n      this.httpError.httpError({ status: 400 }, `loading script \"${url}\"`);\n    });\n\n    return promise;\n  }\n\n  injectScript(script) {\n    const head = document.head || document.querySelector('head');\n    head.appendChild(script);\n  }\n\n  scriptInjector(url) {\n    const script = this.createScript(url);\n    this.injectScript(script);\n    return this.promiseScript(script, url);\n  }\n\n}\n"]}