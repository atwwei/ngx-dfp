{"version":3,"file":"dfp-targeting.directive.js","sourceRoot":"","sources":["../../src/directive/dfp-targeting.directive.ts"],"names":[],"mappings":";;AAAA,sCAAuF;AAEvF,kCAA8C;AAC9C,uDAAoD;AAEpD;IAkBE,+BAEU,EAAkB;QAAlB,OAAE,GAAF,EAAE,CAAgB;QAJpB,WAAM,GAAG,EAAE,CAAC;IAKhB,CAAC;IAdL,sBACI,wCAAK;aADT,UACU,GAA2B;YADrC,iBAOC;YALC,EAAE,CAAC,CAAC,GAAG,YAAY,KAAK,CAAC,CAAC,CAAC;gBACzB,GAAG,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAhB,CAAgB,CAAC,CAAC;YACrC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC;QACH,CAAC;;;OAAA;IASD,kDAAkB,GAAlB;QACE,IAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QAClC,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;IAClC,CAAC;IAED,0CAAU,GAAV;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC;YAC3B,MAAM,IAAI,0BAAkB,CAAC,eAAe,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7D,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,MAAM,IAAI,0BAAkB,CAAC,eAAe,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;QAC/D,CAAC;IACH,CAAC;IAED,wCAAQ,GAAR;QACE,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;YACnB,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC,CAAC;IACL,CAAC;IAED,wCAAQ,GAAR,UAAS,KAAK;QACZ,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,KAAK,KAAK,EAAd,CAAc,CAAC,CAAC,CAAC,CAAC;YACvD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC;IACH,CAAC;;gBAjDF,gBAAS,SAAC;oBACT,QAAQ,EAAE,eAAe;iBAC1B;;;;gBAJQ,iCAAc,uBAqBlB,aAAM,SAAC,iBAAU,CAAC,cAAM,OAAA,iCAAc,EAAd,CAAc,CAAC;;;sBAdzC,YAAK;wBAEL,YAAK;;IA4CR,4BAAC;CAAA,AAnDD,IAmDC;AAhDY,sDAAqB","sourcesContent":["import { Directive, AfterContentInit, Input, Inject, forwardRef } from '@angular/core';\n\nimport { DFPIncompleteError } from '../class';\nimport { DfpAdDirective } from './dfp-ad.directive';\n\n@Directive({\n  selector: 'dfp-targeting'\n})\nexport class DfpTargetingDirective implements AfterContentInit {\n\n  @Input() key: string;\n\n  @Input()\n  set value(val: string | Array<string>) {\n    if (val instanceof Array) {\n      val.forEach(v => this.addValue(v));\n    } else {\n      this.addValue(val);\n    }\n  }\n\n  private values = [];\n\n  constructor(\n    @Inject(forwardRef(() => DfpAdDirective))\n    private ad: DfpAdDirective\n  ) { }\n\n  ngAfterContentInit() {\n    const targeting = this.getState();\n    this.ad.addTargeting(targeting);\n  }\n\n  checkValid() {\n    if (this.key === undefined) {\n      throw new DFPIncompleteError('dfp-targeting', 'key', true);\n    }\n    if (this.values.length === 0) {\n      throw new DFPIncompleteError('dfp-targeting', 'value', true);\n    }\n  }\n\n  getState() {\n    this.checkValid();\n    return Object.freeze({\n      key: this.key,\n      values: this.values\n    });\n  }\n\n  addValue(value) {\n    if (value && !this.values.find(item => item === value)) {\n      this.values.push(value);\n    }\n  }\n\n}\n"]}